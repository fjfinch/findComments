#!/bin/bash

#COLORED OUTPUT
declare -r RED='\033[0;31m'
declare -r RED_BOLD='\033[1;31m'
declare -r ORANGE_BOLD='\033[1;33m'
declare -r BLUE_BOLD='\033[1;36m'
declare -r RESET='\033[0m'

#IS AN ARGUMENT (a file) GIVEN?
if [ "$#" -ne 1 ]; then
        printf "${RED}Missing file.${RESET} Usage: %s <FILE>\n" "$(basename "$0")"
        exit 1
fi

#VARIABLES
printf "Extra search terms? (seperate by space): ";read -r -a INPUT
declare -r FILE="$1"
declare -a BLACKLIST=("pdf" "jpg" "jpeg" "png" "gif" "tiff" "mp3" "mp4" "eot" "ttf" "otf" "pfb" "svg" "woff" "woff2")
declare -a list=()

#DOES THE FILE EXIST?
if [ ! -f "${FILE}" ]; then
	printf "${RED}File doesn't exist${RESET}\n"
	exit 1
fi

single_comment () {
	echo "${1}" | grep -o "${2}.*"
}

page_comment () {
	echo "${output}" | perl -pe 's|(<!--[^>])|\n\1|g' | awk '/<!--/,/-->/' | perl -pe 's|(.*)(-->).*$|\1\2|'

	style="$(echo "${output}" | perl -pe 's|(<style.*?>)|\n\1|g' | awk '/<style.*?>/,/<\/style>/' | perl -pe 's|(.*)(<\/style>).*$|\1\2|')"
	if [ -n "${style}" ];then
		echo "${style}" | perl -pe 's|(/\*)|\n\1|g' | awk '/\/\*/,/\*\//' | perl -pe 's|(.*)(\*/).*$|\1\2|'
	fi

	script="$(echo "${output}" | perl -pe 's|(<script.*?>)|\n\1|g' | awk '/<script.*?>/,/<\/script>/' | perl -pe 's|(.*)(<\/script>).*$|\1\2|')"
	if [ -n "${script}" ];then
		echo "${script}" | perl -pe 's|(/\*)|\n\1|g' | awk '/\/\*/,/\*\//' | perl -pe 's|(.*)(\*/).*$|\1\2|'
		#single_comment "${script}" "//"
	fi
}

printf "[*] ${BLUE_BOLD}Reading file: '%s'...${RESET}\n" "${FILE}"

#READ PAGES FROM FILE
while IFS= read -r page; do
	#SANITIZE URL
	page="$(echo "${page}" | cut -f1 -d'?')"

	#ADD PAGE TO LIST - IF PAGE IS ALREADY SCANNED: IGNORE
	if [[ "${list[@]}" =~ (^|[[:space:]])"${page}"([[:space:]]|$) ]]; then
		continue
	fi
	list+=("${page}")

	#CHECK FOR BLACKLISTED EXTENSIONS (WHICH CANT HAVE COMMENTS)
	extension="${page##*.}"
	if [[ "${BLACKLIST}" =~ "${extension,,}" ]]; then
		continue
	fi

	#CURL PAGE or DISPLAY ERROR
	if ! output="$(curl -k -L -m 4 -s "${page}" 2>/dev/null)"; then
		printf "${RED_BOLD}Error reading page: %s${RESET}\n" "${page}"
		continue
	fi

        #OUTPUT PAGE NAME
        printf "${ORANGE_BOLD}%s${RESET}\n" "${page}"

	case "${extension,,}" in
		"html"|"htm"|"xml"|"php"|"asp"|"aspx"|"jsp")
			page_comment
		;;
		"js"|"java"|"class"|"css"|"c"|"cc"|"cpp"|"sql")
			echo "${output}" | perl -pe 's|(/\*)|\n\1|g' | awk '/\/\*/,/\*\//' | perl -pe 's|(.*)(\*/).*$|\1\2|'

			if [ "${extension,,}" != "css" ] && [ "${extension,,}" != "sql" ];then
				single_comment "${output}" "//"
			fi

			if [ "${extension,,}" == "sql" ];then
				single_comment "${output}" "\-\-"
			fi
		;;
		"py")
			single_comment "${output}" "#"
		;;
		*)
			page_comment
			echo "${output}" | perl -pe 's|(/\*)|\n\1|g' | awk '/\/\*/,/\*\//' | perl -pe 's|(.*)(\*/).*$|\1\2|'
	esac

	for keyword in "${INPUT[@]}"
	do
		echo "${output}" | grep -i "${keyword}"
	done
done < "${FILE}"
